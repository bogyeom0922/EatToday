name: Java CI/CD with Gradle and Docker

on:
  push:
    branches: [ "main" , "dev" ]
  pull_request:
    branches: [ "main" , "dev" ]

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. 코드 체크아웃
    - uses: actions/checkout@v4

    # 2. JDK 17 설치
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 3. application-prod.yml 생성
    - name: Create application-prod.yml
      run: |
        cd ./src/main/resources
        touch ./application-prod.yml
        echo "${{ secrets.APPLICATION_PROD }}" > ./application-prod.yml

    # 4. Gradle 실행 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # 5. Gradle 빌드 (테스트 제외)
    - name: Build with Gradle
      run: ./gradlew build -x test

    # 6. Docker 이미지 빌드 및 푸시
    - name: Docker Build and Push
      run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker build -t app .
        docker tag app ${{ secrets.DOCKER_USERNAME }}/sejongmate:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/sejongmate:latest
    
    # 7. 배포 작업
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }} # EC2 퍼블릭 DNS
        username: ec2-user
        key: ${{ secrets.PRIVATE_KEY }} # pem 키
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/sejongmate:latest
          docker stop $(docker ps -a -q) || true
          docker run -d --log-driver=syslog -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/sejongmate:latest
          docker rm $(docker ps --filter 'status=exited' -a -q) || true
          docker image prune -a -f
