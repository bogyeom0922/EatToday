{{>layout/header}}

<div class="userinfo_category">
    <a href="/{{uid}}">
        <div class="userinfo_shortcuts">회원정보 수정</div>
    </a>
    <a href="/{{uid}}/review">
        <div class="userinfo_current">리뷰 관리</div>
    </a>
    <a href="/{{uid}}/like">
        <div class="userinfo_shortcuts">즐겨찾기 관리</div>
    </a>
</div>

<div class="userinfo_background">
    <div class="userinfo_title">작성한 리뷰</div>

    <table>
        <tbody>
        {{#reviews}}
            <tr>
                <td>{{body}}</td>
                <td>{{#store}}{{store_name}}{{/store}}</td>
                <td>
                    <button class="button" onclick="openModal()"
                            data-bs-toggle="modal"
                            data-bs-target="#review-edit-Modal"
                            data-bs-id="{{id}}"
                            data-bs-store="{{store}}"
                            data-bs-userid="{{userid}}"
                            data-bs-body="{{body}}">수정
                    </button>
                    <button class="button review-delete-btn" data-review-id={{id}}>삭제</button>
                </td>
            </tr>
        {{/reviews}}
        </tbody>
    </table>

    <div id="modalBackground" class="modal-background"></div>

    <div id="review-edit-Modal" class="modal">
        <div class="modal-content">
            <span class="close" id="closeModal">&times;</span>
            <h2>수정하기</h2>
            <!-- 수정 폼 -->
            <form id="editForm">
                <input type="hidden" id="edit-review-id">
                <input type="hidden" id="edit-review-store">
                <input type="hidden" id="edit-review-userid">
                <textarea type="text" id="edit-review-body" style="width: 90%; height: 200px;"></textarea><br>
                <!-- 다른 필드들도 추가 -->
                <button type="button" id="review-update-btn">수정 완료</button>
            </form>
        </div>
    </div>




    <script>
        // 모달 열기 함수
        function openModal() {
            document.getElementById("review-edit-Modal").style.display = "block";
        }

        // 모달 닫기 함수
        document.getElementById("closeModal").onclick = function () {
            document.getElementById("review-edit-Modal").style.display = "none";
        }
    </script>

    <!--댓글 수정-->
    <script>
        {
            const reviewEditButtons = document.querySelectorAll(".button[data-bs-toggle='modal']");
            reviewEditButtons.forEach(btn => {
                btn.addEventListener("click", (event) => {
                    const triggerBtn = event.target;

                    const id = triggerBtn.getAttribute("data-bs-id");
                    const store = triggerBtn.getAttribute("data-bs-store");
                    const userid = triggerBtn.getAttribute("data-bs-userid");
                    const body = triggerBtn.getAttribute("data-bs-body");

                    document.querySelector("#edit-review-id").value = id;
                    document.querySelector("#edit-review-store").value = store;
                    document.querySelector("#edit-review-userid").value = userid;
                    document.querySelector("#edit-review-body").value = body;

                    openModal();
                });
            });
        }
        {
            const reviewUpdateBtn = document.querySelector("#review-update-btn");
            reviewUpdateBtn.addEventListener("click", function (){
                const review = {
                    id: document.querySelector("#edit-review-id").value,
                    store: document.querySelector("#edit-review-store").value,
                    userid: document.querySelector("#edit-review-userid").value,
                    body: document.querySelector("#edit-review-body").value
                };
                console.log(review);
                // 수정 REST API 호출
                const url = "/api/reviews/" + review.id;
                fetch(url, {
                    method: "PATCH", // PATCH 요청
                    headers: { // 전송 데이터 타입(JSON) 정보
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(review) //comment 객체를 JSON 문자열로 변환 전송
                }).then(response => {
                    // HTTP 응답 코드에 따른 메시지 출력
                    const msg = (response.ok) ? "댓글이 수정됐습니다." : "댓글 수정 실패..!";
                    alert(msg);
                    // 현재 페이지 새로 고침
                    window.location.reload();
                });
            });
        }
    </script>

    <!--    댓글 삭제-->
    <script>
        {
            const reviewDeleteBtns = document.querySelectorAll(".review-delete-btn");
            reviewDeleteBtns.forEach(btn => {
                btn.addEventListener("click", (event) => {
                    const reviewDeleteBtn = event.target;
                    const reviewId = reviewDeleteBtn.getAttribute("data-review-id");
                    console.log(`삭제 버튼 클릭: ${reviewId}번 댓글`);
                    const url= `/api/reviews/${reviewId}`;
                    fetch(url, {
                        method: "DELETE"
                    }).then(response=>{
                        if(!response.ok) {
                            alert("댓글 삭제 실패");
                            return;
                        }
                        const target = document.querySelector(`#review-${reviewId}`); // 수정된 부분
                        if (target) {
                            target.remove(); // 요소가 존재할 때만 삭제
                            const msg = `${reviewId}번 댓글을 삭제했습니다`;
                            alert(msg);
                            window.location.reload(true);
                        } else {
                            console.error(`ID가 review-${reviewId}인 요소를 찾을 수 없습니다.`);
                        }
                    })
                });
            });
        }

    </script>
</div>
{{>layout/footer}}
