{{>layout/header}}

{{#user}}
    <input type="hidden" id="new-like-userid" value="{{id}}">
{{/user}}
{{#rest}}
    <input type="hidden" id="new-like-store-id" value="{{id}}">
    <div class="image-container">
        <img src="{{store_img}}" class="rest_img" alt="매장 이미지">
        <div class="title_background">
            <div class="store_name">
                {{store_name}}
            </div>
            <button class="review_link">더 알아보기</button>
        </div>
    </div>

    <div class="bookmark" id="like-{{id}}">
        <img id="bookmark_img" src="/img/bookmark_x.png" alt="즐겨찾기">
    </div>

    <div class="rest_detail">
        <table>
            <tr>
                <td style="width:25%;">영업시간</td>
                <td style="width:75%;">{{store_time}}</td>
            </tr>
            <tr>
                <td>주소</td>
                <td id="storeAddress">{{store_address}}</td>
            </tr>
            <tr>
                <td>대표번호</td>
                <td>{{store_phone}}</td>
            </tr>
            <tr>
                <td>별점</td>
                <td>{{store_star}}</td>
            </tr>
            <tr>
                <td>메뉴</td>
                <td>
                    <div id="MenuDisplay" class="rest_menu_list"></div>
                </td>
            </tr>
        </table>

        <div id="MenuSentence">
            {{store_menu}}
        </div>

        <div class="map_section">
            <button id="directionsButton" class="direction">길찾기</button>
            <div id="map" class="map"></div>
        </div>

        <div class="review">
            <p>리뷰</p>
            {{>review/_reviews}}
            <div class="rest_review_list">
                <div id="ReviewDisplay"></div>
            </div>
        </div>
    </div>
{{/rest}}

<script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey={{kakaoApiKey}}&libraries=services"></script>
<script>
    var address = document.getElementById('storeAddress').innerText.trim();

    var container = document.getElementById('map');
    var options = {
        center: new kakao.maps.LatLng(33.450701, 126.570667),
        level: 3
    };

    var map = new kakao.maps.Map(container, options);

    var geocoder = new kakao.maps.services.Geocoder();
    geocoder.addressSearch(address, function (result, status) {
        if (status === kakao.maps.services.Status.OK) {
            var coords = new kakao.maps.LatLng(result[0].y, result[0].x);
            map.setCenter(coords);

            var marker = new kakao.maps.Marker({
                map: map,
                position: coords,
                title: "매장 위치"
            });

        } else {
            console.error("좌표로 변환 도중 오류 발생: " + address);
        }
    });

    //길찾기
    var destinationCoords = null;

    geocoder.addressSearch(address, function (result, status) {
        if (status === kakao.maps.services.Status.OK) {
            destinationCoords = new kakao.maps.LatLng(result[0].y, result[0].x);
            map.setCenter(destinationCoords);
        } else {
            console.error("좌표로 변환 도중 오류 발생: " + address);
        }
    });

    document.getElementById('directionsButton').addEventListener('click', function () {
        if (!destinationCoords) {
            alert("도착지를 다시 설정해주세요.");
            return;
        }

        var kakaoMapURL = `https://map.kakao.com/link/to/도착지,${destinationCoords.getLat()},${destinationCoords.getLng()}`;

        // 새 창으로 길찾기 열기
        window.open(kakaoMapURL, '_blank');
    });
</script>

<script>
    document.querySelector('.review_link').addEventListener('click', function () {
        const target = document.querySelector('.rest_detail');
        target.scrollIntoView({behavior: 'smooth', block: 'start'});
    });
</script>

<!--menu-->
<script>

    const menu_str = document.getElementById("MenuSentence").textContent;
    const menu_arr = menu_str.split(", ");

    const MenuDisplay = document.getElementById("MenuDisplay");
    document.getElementById("MenuSentence").style.display = "none";

    menu_arr.forEach((menu, menu_index) => {
        let menu_text = menu.trim();
        if (menu_index === menu_arr.length - 1) {
            menu_text = menu_text.slice(0, -1);
        }
        MenuDisplay.append(menu_text);
        MenuDisplay.appendChild(document.createElement("br"));
    });

</script>

<!--like-->
<script type="text/javascript">
    let state = 0;
    const url = "/api/" + document.querySelector("#new-like-userid").value + "/" + document.querySelector("#new-like-store-id").value + "/likes";
    fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Server response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log(data);
                if (data == null) {
                    document.getElementById('bookmark_img').src = "/img/bookmark_x.png";
                    state = 0;
                }
                document.getElementById('bookmark_img').src = "/img/bookmark_o.png";
                state = 1;
            }).catch(error => {
        console.error('There was a problem with the fetch operation:', error);
    });

    const likeCreate = document.getElementById('bookmark_img');
    likeCreate.addEventListener("click", function () {
        if (state === 0) {
            state = 1;
            document.getElementById('bookmark_img').src = "/img/bookmark_o.png";
            const like = {
                user_id: document.querySelector("#new-like-userid").value,
                store_id: document.querySelector("#new-like-store-id").value,
                like_state: 1,
            };
            const url = "/api/" + like.user_id + "/" + like.store_id + "/likes";
            fetch(url, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(like)
            }).then(response => response.json())
                    .then(data => {
                        let like_id = data.id;
                        console.log("생성된 좋아요 id: " + like_id);
                        let like_state = data.state;
                        window.location.reload();
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert("좋아요 생성 실패");
                    });
        } else {
            document.getElementById('bookmark_img').src = "/img/bookmark_x.png";
            fetch("/api/likes/" + document.querySelector("#new-like-userid").value + "/" + document.querySelector("#new-like-store-id").value, {
                method: "DELETE"
            }).then(response => {
                if (!response.ok) {
                    alert("좋아요 삭제 실패");
                    console.log(document.querySelector("#new-like-userid").value);
                    console.log(document.querySelector("#new-like-store-id").value);
                    return;
                }
                const target = document.querySelector(`#like-` + document.querySelector("#new-like-store-id").value); // 수정된 부분
                if (target) {
                    target.remove(); // 요소가 존재할 때만 삭제
                    const msg = "매장 아이디:" + document.querySelector("#new-like-store-id").value + `번 즐겨찾기를 해제했습니다`;
                    alert(msg);
                    window.location.reload(true);
                } else {
                    console.error(`ID가 like-'+ document.querySelector("#new-like-store-id").value + '인 요소를 찾을 수 없습니다.`);
                }
            }).catch(error => {
                console.error('Error:', error);
                alert("좋아요 삭제 실패");

            });
        }
    });
</script>

</body>
</html>