{{>layout/header}}

<div class="detail_background">
    <!--    뒤로가기-->
    <a href="javascript:window.history.back();"><img src="/img/go_back.png" class="go_back"></a>
    <!--    model 'rest'에 매장 상세 정보 등록하여 출력-->
    {{#rest}}
        <!--        매장 이미지-->
        <img src="{{store_img}}" class="rest_img" alt="매장 이미지">
        <!--    매장 이름, 좋아요 버튼 배경-->
        <div class="title_background">
            <!--            매장 이름-->
            <div class="store_name">
                {{store_name}}
            </div>
            <!--            즐겨찾기-->
            <div class="bookmark" id="like-{{id}}">
                <img id="bookmark_img" src="/img/bookmark_x.png" alt="" width="25">
            </div>
        </div>

        <div class="rest_detail">
            <table>
                <!--                영업시간-->
                <tr>
                    <td style="width:40%; font-weight: 700">영업시간</td>
                    <td style="width:60%; font-weight: 400">{{store_time}}</td>
                </tr>
                <!--                매장 주소-->
                <tr>
                    <td style="width:40%; font-weight: 700">주소</td>
                    <td style="width:60%; font-weight: 400">{{store_address}}</td>
                </tr>
                <!--                매장 전화번호-->
                <tr>
                    <td style="width:40%; font-weight: 700">대표번호</td>
                    <td style="width:60%; font-weight: 400">{{store_phone}}</td>
                </tr>
                <!--                매장 별점-->
                <tr>
                    <td style="width:40%; font-weight: 700">별점</td>
                    <td style="width:60%; font-weight: 400">{{store_star}}</td>
                </tr>
            </table>

            <!--            메뉴 값 전달-->
            <div id="MenuSentence">
                {{store_menu}}
            </div>

            <!--            메뉴 값 화면 출력-->
            <div class="rest_menu">
                <p class="rest_menu_p">메뉴</p>
                <div class="rest_menu_list">
                    <div id="MenuDisplay"></div>
                </div>
            </div>

            <!--            리뷰 값 전달-->
            <div id="ReviewSentence">
                {{review_content}}
            </div>

            <!--            리뷰 값 화면 출력-->
            <div class="rest_menu">
                <p class="rest_menu_p">리뷰</p>
                <!--                사이트 자체 리뷰-->
                {{>review/_reviews}}
                <div class="rest_review_list">
                    <div id="ReviewDisplay"></div>
                </div>
            </div>

        </div>
    {{/rest}}
</div>

<!--menu-->
<script type="text/javascript">

    const menu_str = document.getElementById("MenuSentence").textContent; //div 내용 가져옴
    const menu_arr = menu_str.split(", ");

    const MenuDisplay = document.getElementById("MenuDisplay"); // 문장 표시할 div 가져옴
    document.getElementById("MenuSentence").style.display = "none"; //원래 있던 문장 숨기기

    menu_arr.forEach((menu, menu_index) => {
        let menu_text = menu.trim(); // 요소 앞 뒤 불필요한 공백 제거
        if (menu_index === menu_arr.length - 1) {
            menu_text = menu_text.slice(0, -1); // 마지막 배열 요소 마지막 글자 제거
        }
        MenuDisplay.append(menu_text); //div에 글자 추가
        MenuDisplay.appendChild(document.createElement("br")); // br 추가
    });

</script>

<!--review-->
<script type="text/javascript">

    const review_str = document.getElementById("ReviewSentence").textContent; //div 내용 가져옴
    const review_arr = review_str.split("+ ");

    const ReviewDisplay = document.getElementById("ReviewDisplay"); // 문장 표시할 div 가져옴
    document.getElementById("ReviewSentence").style.display = "none"; //원래 있던 문장 숨기기

    review_arr.forEach((review, review_index) => {
        let review_text = review.trim(); // 요소 앞 뒤 불필요한 공백 제거
        if (review_index === review_arr.length - 1) {
            review_text = review_text.slice(0, -1); // 마지막 배열 요소 마지막 글자 제거
        }
        ReviewDisplay.append(review_text); //div에 글자 추가
        ReviewDisplay.appendChild(document.createElement("br")); // br 추가
        ReviewDisplay.appendChild(document.createElement("br")); // br 추가
    });

</script>

<!--like-->
<script type="text/javascript">
    let state = 0;
    const url = "/api/" + document.querySelector("#new-like-userid").value + "/" + document.querySelector("#new-like-store-id").value + "/likes";
    fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Server response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log(data);
                if (data == null) {
                    document.getElementById('bookmark_img').src = "/img/bookmark_x.png";
                    state = 0;
                }
                document.getElementById('bookmark_img').src = "/img/bookmark_o.png";
                state = 1;
            }).catch(error => {
        console.error('There was a problem with the fetch operation:', error);
    });

    const likeCreate = document.getElementById('bookmark_img');
    likeCreate.addEventListener("click", function () {
        if (state === 0) {
            state = 1;
            document.getElementById('bookmark_img').src = "/img/bookmark_o.png";
            const like = {
                user_id: document.querySelector("#new-like-userid").value,
                store_id: document.querySelector("#new-like-store-id").value,
                like_state: 1,
            };
            const url = "/api/" + like.user_id + "/" + like.store_id + "/likes";
            fetch(url, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(like)
            }).then(response => response.json())
                    .then(data => {
                        let like_id = data.id;
                        console.log("생성된 좋아요 id: " + like_id);
                        let like_state = data.state;
                        window.location.reload();
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert("좋아요 생성 실패");
                    });
        } else {
            document.getElementById('bookmark_img').src = "/img/bookmark_x.png";
            fetch("/api/likes/" + document.querySelector("#new-like-userid").value + "/" + document.querySelector("#new-like-store-id").value, {
                method: "DELETE"
            }).then(response => {
                if (!response.ok) {
                    alert("좋아요 삭제 실패");
                    console.log(document.querySelector("#new-like-userid").value);
                    console.log(document.querySelector("#new-like-store-id").value);
                    return;
                }
                const target = document.querySelector(`#like-` + document.querySelector("#new-like-store-id").value); // 수정된 부분
                if (target) {
                    target.remove(); // 요소가 존재할 때만 삭제
                    const msg = "매장 아이디:" + document.querySelector("#new-like-store-id").value + `번 즐겨찾기를 해제했습니다`;
                    alert(msg);
                    window.location.reload(true);
                } else {
                    console.error(`ID가 like-'+ document.querySelector("#new-like-store-id").value + '인 요소를 찾을 수 없습니다.`);
                }
            }).catch(error => {
                console.error('Error:', error);
                alert("좋아요 삭제 실패");
            });
        }
    });
</script>