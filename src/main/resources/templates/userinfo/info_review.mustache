{{>layout/header}}

<div class="userinfo_category">
    <a href="/{{uid}}">
        <div class="userinfo_shortcuts">회원정보 수정</div>
    </a>
    <a href="/{{uid}}/review">
        <div class="userinfo_current">리뷰 관리</div>
    </a>
    <a href="/{{uid}}/like">
        <div class="userinfo_shortcuts">즐겨찾기 관리</div>
    </a>
</div>

<div class="userinfo_background">
    <div class="userinfo_title">작성한 리뷰</div>

    <table>
        <tbody>
        {{#reviews}}
            <tr>
                <td style="width:23%;">{{#store}}{{store_name}}{{/store}}</td>
                <td style="width:65%;">{{body}}</td>
                <td style="width:22%;">
                    <button class="button" onclick="openModal()"
                            data-bs-toggle="modal"
                            data-bs-target="#review-edit-Modal"
                            data-bs-id="{{id}}"
                            data-bs-store="{{store}}"
                            data-bs-userid="{{userid}}"
                            data-bs-body="{{body}}">수정
                    </button>
                    <button class="button review-delete-btn" data-review-id="{{id}}">삭제</button>
                </td>
            </tr>
        {{/reviews}}
        </tbody>
    </table>

    <div id="modalBackground" class="modal_background"></div>

    <div id="review-edit-Modal" class="modal">
        <div class="modal_content">
            <span class="close" id="closeModal">&times;</span>
            <h2>수정하기</h2>
            <form id="editForm">
                <input type="hidden" id="edit-review-id">
                <input type="hidden" id="edit-review-store">
                <input type="hidden" id="edit-review-userid">
                <textarea type="text" id="edit-review-body" class="modal_textarea"></textarea><br>
                <button type="button" class="modal_button" id="review-update-btn">저장</button>
            </form>
        </div>
    </div>
</div>

<!--모달 열기,닫기-->
<script>
    {
        // 모달 열기 함수
        function openModal() {
            document.getElementById("review-edit-Modal").style.display = "block";
        }

        // 모달 닫기 함수
        document.getElementById("closeModal").onclick = function () {
            document.getElementById("review-edit-Modal").style.display = "none";
        }
    }
</script>

<!--댓글 수정-->
<script>
    {
        const reviewEditButton = document.querySelectorAll(".button[data-bs-toggle='modal']");
        reviewEditButton.forEach(btn => {
            btn.addEventListener("click", (event) => {
                const review = event.target;

                const id = review.getAttribute("data-bs-id");
                const store = review.getAttribute("data-bs-store");
                const userid = review.getAttribute("data-bs-userid");
                const body = review.getAttribute("data-bs-body");

                document.querySelector("#edit-review-id").value = id;
                document.querySelector("#edit-review-store").value = store;
                document.querySelector("#edit-review-userid").value = userid;
                document.querySelector("#edit-review-body").value = body;

                openModal();
            });
        });
    }
</script>
<script>
    {
        const reviewUpdateButton = document.querySelector("#review-update-btn");
        reviewUpdateButton.addEventListener("click", function () {
            const review = {
                id: document.querySelector("#edit-review-id").value,
                store: document.querySelector("#edit-review-store").value,
                userid: document.querySelector("#edit-review-userid").value,
                body: document.querySelector("#edit-review-body").value
            };
            console.log(review);

            // 수정 REST API 호출
            const url = "/api/reviews/" + review.id;
            fetch(url, {
                method: "PATCH",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(review)
            }).then(response => {
                const msg = (response.ok) ? "댓글이 수정됐습니다." : "댓글 수정에 실패하였습니다.";
                alert(msg);
                window.location.reload();
            });
        });
    }
</script>

<!--댓글 삭제-->
<script>
    {
        const reviewDeleteButtons = document.querySelectorAll(".review-delete-btn");
        reviewDeleteButtons.forEach(btn => {
            btn.addEventListener("click", (event) => {
                const deleteBtn = event.target;
                const reviewId = deleteBtn.getAttribute("data-review-id");
                console.log(`삭제 버튼 클릭: ${reviewId}번 댓글`);

                // 삭제 REST API 호출
                const url = `/api/reviews/${reviewId}`;
                fetch(url, {
                    method: "DELETE"
                }).then(response => {
                    if (!response.ok) {
                        alert("댓글 삭제 실패");
                        return;
                    }

                    // 삭제 후 해당 리뷰 요소를 DOM에서 제거
                    const review = document.querySelector(`#review-${reviewId}`);
                    if (review) {
                        review.remove();
                        const msg = `${reviewId}번 댓글을 삭제했습니다`;
                        alert(msg);
                    } else {
                        console.error(`ID가 review-${reviewId}인 요소를 찾을 수 없습니다.`);
                    }
                }).catch(error => {
                    console.error("댓글 삭제 중 오류 발생:", error);
                    alert("댓글 삭제 중 오류가 발생했습니다.");
                });
            });
        });
    }
</script>


{{>layout/footer}}